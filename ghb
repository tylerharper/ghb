#!/usr/bin/env python
import snooze
import json
import sys
import subprocess
import os
import pystache
from ficcle import Faccle, Ficcle

TEMPLATE_PREFIX = "/usr/share/ghb/templates/"
TEMPLATE_PREFIX = ""

github_login = subprocess.Popen(["git", "config", "--global", "github.user"], stdout=subprocess.PIPE).stdout.read().strip('\n ') 
github_token = subprocess.Popen(["git", "config", "--global", "github.token"], stdout=subprocess.PIPE).stdout.read().strip('\n ') 

github = snooze.Snooze('github.com/api/v2/json', secure=True)

colors = {
            'black':    "\033[1;30m",
            'red':      "\033[1;31m",
            'green':    "\033[1;32m",
            'yellow':   "\033[1;33m",
            'blue':     "\033[1;34m",
            'magenta':  "\033[1;35m",
            'cyan':     "\033[1;36m",
            'white':    "\033[1;37m",
            'bold':     "\033[1m",
            'reset':    "\033[1;m",
         }

def render(template, context):
    # hacks.
    for outer in context:
        try:
            for inner in context[outer]:
                inner.update(colors)
        except AttributeError:
            context.update(colors)
            break

    v = pystache.View(context=context)
    v.template_name = TEMPLATE_PREFIX + template
    text = v.render()
    
    output = ''
    for line in text.split('\n'):
        while len(line) > 80:
            pos = line[:80].rfind(' ')
            output = output + line[:pos] + '\n'
            line = line[pos+1:]

        output = output + line + '\n'

    print output.strip()
            

class issue(object):
    def show(self, name, state_number='open'):
        try:
            int(state_number)
        except ValueError:
            resp = github.issues.list.repo[name].state[state_number](_method_ = 'get')
            issues = json.loads(resp)
            render('templates/show/issues', issues)

        else:
            resp = github.issues.show.repo[name].number[state_number](_method_ = 'get')
            issue = json.loads(resp)
            render('templates/show/issue', issue['issue'])

class user(object):
    def show(self, name):
        resp = github.user.show.user[name](_method_='get') 
        results = json.loads(resp)
        render('templates/show/user', results['user'])

class users(object):
    def search(self, *args):
        if len(args) == 0:
            print "error: at least one search term required"
            sys.exit(1)

        search = '+'.join(args)

        resp = github.user.search.search_str[search](_method_='get')
        results = json.loads(resp)
        render('templates/search/users', results)
        

class repo(object):
    def show(self, name):
        resp = github.repos.show.repo[name](_method_='get')
        results = json.loads(resp)
        results['repository'] = [results['repository']] # used for pystache
        render('templates/show/repo', results)

    def new(self, name, description=None, homepage=None, public=1):
        args = {'name': name, 'public':public, 'login':github_login, 'token' : github_token}
        if description != None:
            args['description'] = description
        if homepage != None:
            args['homepage'] = homepage

        resp = github.repos.create(_method_='post', **args)

    def delete(self, name, delete_token=None):
        resp = github.repos.delete.repo[name](_method_='post', delete_token=delete_token, login=github_login, token=github_token)
        
        try:
            del_token = json.loads(resp)['delete_token']
            print 'If you are sure you want to delete repository %s call:' % name
            print '%s delete repo %s %s' % (sys.argv[0], name, del_token)
        except KeyError:
            status = json.loads(resp)['status']
            if status == 'deleted':
                print '%s has been deleted' % name

class repos(object):
    def show(self, user):
        resp = github.repos.show.user[user](_method_='get')
        results = json.loads(resp)
        render('templates/show/user-repos', results)

    def search(self, *args):
        if len(args) == 0:
            print "error: at least one search term required"
            sys.exit(1)

        search = '+'.join(args)

        resp = github.repos.search.search_str[search](_method_='get')
        results = json.loads(resp)
        render('templates/search/repos', results)

        

def add_issue(repo, title, body, user=github_login, token=github_token):
    resp = github.issues.open.repo[repo](_method_='post', login=user, token=token, title=title, body=body)
    print resp
    

def edit_issue(repo, number, title, body, user=github_login, token=github_token):
    resp = github.issues.edit.repo[repo].number[number](_method_='post', login=user, token=token, title=title, body=body)
    print resp

if __name__ == '__main__':
    faccle = Faccle()
    faccle.add_object(issue)
    faccle.alias('issue', 'issues', '-i')
    faccle.add_object(repo)
    faccle.add_object(repos)
    faccle.add_object(user)
    faccle.add_object(users)
    faccle.run_faccle()

